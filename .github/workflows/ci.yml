name: CI

on:
  push:
    branches: [ main, '001-gcode-finishing-optimizer*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run: gofmt -s -w ."
          gofmt -s -l .
          exit 1
        fi
      shell: bash
      if: runner.os != 'Windows'

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.txt
        flags: ${{ matrix.os }}
      if: matrix.os == 'ubuntu-latest'

    - name: Build binary
      run: go build -o gcode-optimizer ./cmd/gcode-optimizer/

    - name: Test binary execution
      run: ./gcode-optimizer --version
      shell: bash
      if: runner.os != 'Windows'

    - name: Test binary execution (Windows)
      run: .\gcode-optimizer.exe --version
      if: runner.os == 'Windows'

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
